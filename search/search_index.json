{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Git and SSH","text":"<p>When using Git with Secure Shell (SSH) to connect from a Git client to a Git server, these are the tricks to handle multiple Github/Gitlab accounts to connect to multiple Github/Gitlab servers.</p> <p>This spawns out of a necessity to manage a chaotic environment with</p> <ol> <li>numerous Git (ex. Github, Gitlab, Bitbucket) accounts,</li> <li>many SSH keys associated with different identities,</li> <li>and many different Git servers to connect to.</li> </ol> <p>This guide assumes you're in a Unix/Linux environment or a Linux like environment such as cygwin.</p>"},{"location":"#overview","title":"Overview","text":"<ol> <li>Separate folders when cloning a different Git account user's repository to ensure we don't mix and match two different user handles when working on a repository.</li> <li>Separate .gitconfig files to separate Git identity - name and email separation for selective folders.</li> <li>Separate SSH keys for identity management when identifying as a Git user to connect to a Git server.</li> <li>Separate SSH Configuration as a configuration to connect to different Git servers using different Git users.</li> <li>(Optional) Automate cloning and pulls so that we have a history of what's in the folders.</li> </ol>"},{"location":"#organize-folder-structure","title":"Organize Folder Structure","text":"<p>I favor creating a single <code>code</code> folder for all code related artifacts. Within the folder, I create subfolders aligned to Git servers and Git profiles I intend to associate with. For example, image <code>user1</code> is the name of the user.</p> <p>We can have multiple folder representing different organizations and projects underneath. Each organization tends to associate with a Git server (ex. Github, Gitlab, etc) or an organization within Github or Gitlab (ex. https://github.com/google). Each project underneath is a Git repository.</p> <p>Once we organize our folder structure in this manner, we can setup Git identity to associate our Git identity (username, email) to each of the organization folders.</p> <pre><code>/home/user1/code\n\u251c\u2500\u2500 org1\n\u2502 \u251c\u2500\u2500 project1\n\u2502 \u251c\u2500\u2500 project2\n\u251c\u2500\u2500 org2\n\u2502 \u251c\u2500\u2500 project1\n\u2502 \u251c\u2500\u2500 project2\n\u251c\u2500\u2500 org3\n\u2502 \u251c\u2500\u2500 projectz\n\u251c\u2500\u2500 org4\n\u2502 \u251c\u2500\u2500 project9\n\u2502 \u251c\u2500\u2500 projectb\n</code></pre>"},{"location":"#git-config-identity","title":"Git Config Identity","text":"<p>Most people set their Git identity manually using the command line once globally because Git commits requires it. Git server providers such as GitHub also verifies Git commit via Git config email to put a Verified badge on the commit.</p> <p>The most common way done manually is via the command line:</p> <pre><code># To set your name and email address globally, use the following commands in your terminal:\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"your.email@example.com\"\n</code></pre> <p>Note</p> <p>GitHub recommends using a noreply email they provide to avoid getting spammed by soliciters seeking to profit off your Git commit emails.</p> <p>To automate <code>git config</code> across the folder structure setup previously, we create a gitconfig file that is stored the root of our directory. This file has no file extension and is a simple text file.</p> <p>For example, my .gitconfig file is located at <code>~/.gitconfig</code> or <code>/home/user1/.gitconfig</code>.</p> <p>Next, we include an <code>includeIf</code> clause to point at each of the folder structure created earlier, the path after <code>gitdir:</code> must end in <code>/</code> to represent a directory. This instructs Git that when looking in the path of <code>~/code/org/</code>, to use the configuration specified in the path, <code>.gitconfig-org1</code>.</p> <pre><code>[includeIf \"gitdir:~/code/org1/\"]\n  path = .gitconfig-org1\n[includeIf \"gitdir:~/code/org2/\"]\n  path = .gitconfig-org2\n[includeIf \"gitdir:~/code/github-org1/\"]\n  path = .gitconfig-github-org1\n[includeIf \"gitdir:~/code/github-org2/\"]\n  path = .gitconfig-github-org2\n[includeIf \"gitdir:~/code/gitlab-org1/\"]\n  path = .gitconfig-org1\n[core]\n  attributesfile = .gitattributes\n</code></pre> <p>The <code>.gitconfig-org1</code> file includes a configuration of the user's name and email address.</p> <p>Note</p> <p>If you decide to keep your email private for Github, go to Github email settings and navigate to the section of the Github provided email you should use.</p> <pre><code>[user]\nname = \"user1\"\nemail = 1234556+user1@users.noreply.github.com\n</code></pre>"},{"location":"#ssh-keys","title":"SSH Keys","text":"<p>SSH Keys serves as another way other than passwords for a SSH client to authenticate to a SSH server. Typing in passwords to login every time is rather annoying. The security tradeoffs are often debated between using passwords and using SSH keys for authentication.</p> <p>To generate SSH keypairs of public and private key as a client, I prefer ED25519 based keys, as they're faster and smaller than RSA based keys.</p> <pre><code>ssh-keygen -t ed25519 -o -a 100 -C \"email@example.com\" -f ~/.ssh/example_network_id_ed25519\n</code></pre> <p>Otherwise, to generate a RSA 4096 bits keypair:</p> <p>Note</p> <p>RSA 2048 bit keys are still widely in use until standards phases it out in 2030. It is about 4x faster than RSA 4096 bit keys to use while RSA 4096 bit keys have slightly better encryption strength.</p> <pre><code>ssh-keygen -t rsa -b 4096 -C \"email@example.com\" -f ~/.ssh/example_network_id_rsa\n</code></pre> <p>(Optional) You may choose to add a passphrase for extra security and to avoid having to type the password again, it's best to have it cached once with an SSH agent.</p> <p>To run SSH agent, run the following:</p> <pre><code>eval \"$(ssh-agent -s)\"\n</code></pre> <p>(Optional) Add your SSH key to the SSH agent.</p> <pre><code>ssh-add ~/.ssh/example_network_id_ed25519\n</code></pre> <p>The SSH convention for keys is that the private key file has no extensions while the public key file has a .pub extension.</p>"},{"location":"#ssh-configurations","title":"SSH Configurations","text":"<p>SSH Configurations determines what SSH keypair and identity to use when a Git client tries to connect to a Git server; it binds the usage of the keypair with the SSH client's identity when connecting to a Git server listening for SSH connections.</p> <p>The SSH configuration is a single file <code>config</code> in the directory path <code>~/.ssh/config</code>.</p> <p>I modify the config file to target a specific HostName (ex. github.com, gitlab.com) to use a particular User (ex. git) and prefer to use the authentication method of publickey instead of password and select the SSH private key path as the IdentityFile. The config file can include numerous SSH configurations for the different Hosts (ex. Github, Gitlab, Bitbucket) to target.</p> <pre><code>Host github.com-org1\n  HostName github.com\n  User git\n  PreferredAuthentications publickey\n  IdentityFile ~/.ssh/git/github_org1_ed25519\n  IdentitiesOnly yes\n\nHost github.com-org2\n  HostName github.com\n  User git\n  PreferredAuthentications publickey\n  IdentityFile ~/.ssh/git/github_org2_ed25519\n  IdentitiesOnly yes\n\nHost gitlab.com-org1\n  HostName gitlab.com\n  User git\n  PreferredAuthentications publickey\n  IdentityFile ~/.ssh/git/gitlab_org1_ed25519\n  IdentitiesOnly yes\n</code></pre>"},{"location":"#automate-cloning-and-pulls","title":"Automate Cloning and Pulls","text":"<p><code>clone.sh</code> to clone a number of repositories into a folder.</p> <p>Note</p> <p>Notice below that git@github.com-org1 matches our HostName field in the SSH configuration so that the Git client can associate a Git user with a Git server. The SSH configuration binds the Git association together, to select a particular Git user with a particular SSH key for a particular Git server target.</p> <pre><code>#!/usr/bin/env bash\ngit clone git@github.com-org1:fartbagxp/aas-cidr-ranges.git\ngit clone git@github.com-org1:fartbagxp/git-and-ssh.git\ngit clone git@github.com-org1:fartbagxp/asdf-oauth2c.git\n</code></pre> <p>Following the folder structure we setup, we may have another <code>clone.sh</code> script for another organization and the configuration binds the Git user, the unique SSH key, and the Git server target together.</p> <pre><code>#!/usr/bin/env bash\ngit clone git@gitlab.com-org1:dwt1/dotfiles.git\ngit clone git@gitlab.com-org1:wireshark/wireshark.git\n</code></pre> <p>(Optional) To sync repositories without verifying, <code>pull.sh</code> updates all repositories in a folder. This will cause git conflicts if there are unmerged changes!</p> <pre><code>#!/usr/bin/env bash\n\nfor d in */ ; do\n  echo $d\n  git -C $d pull\ndone\n</code></pre>"},{"location":"#miscellaneous-tricks","title":"Miscellaneous Tricks","text":"<p>There are often tricky scenarios when trying to clone or push a project to a Git server based on how our clients connect to the server (sometimes crossing intermediate firewalls) for the first time.</p> <p>These are some debugging tips whether using SSH or HTTPS to connect to the Git server.</p>"},{"location":"#debugging-ssh-on-git","title":"Debugging SSH on Git","text":"<p>When using Git as a client to connect to a server via the SSH protocol, the default <code>git clone &lt;repository&gt;</code> does not offer any helpful debugging messages when a failure happens because of the SSH connection.</p> <p>To enable debugging messages, we can prepend the environment variable GIT_SSH_COMMAND before running git clone.</p> <pre><code>GIT_SSH_COMMAND=\u201cssh -v\u201d git clone git@github.com:github/training-kit.git\n</code></pre> <p>For more verbose output -</p> <pre><code>GIT_SSH_COMMAND=\u201cssh -vvv\u201d git clone git@github.com:github/training-kit.git\n</code></pre>"},{"location":"#debugging-https-on-git","title":"Debugging HTTPS on Git","text":"<p>If the Git server or some intermediate firewall blocks SSH connections to the Git server, we have to rely on the HTTPS protocol to connect to it.</p> <p>Use <code>nc</code> and <code>curl</code> as tools first to determine connectivity.</p> <p>To test whether you can establish a TCP-based connection to the Git server on the standard SSH port 22:</p> <pre><code>nc -vz -w 3 github.com 22\n</code></pre> <p>If the output shows that the connection failed and your regular internet is working, it is likely an intermediate firewall somewhere is blocking your connection or that the Git server doesn\u2019t want to establish a connection over SSH with you.</p> <p>Alternately, run a curl connection to test https</p> <pre><code>curl -vv https://github.com\n</code></pre> <p>A wall of text should appear to fetch the website, showing success. Otherwise, if the connection fails or hangs, it shows a failure, and there\u2019s nothing more we can do.</p> <p>If it is successful, we can then use git to clone a repository over https.</p> <pre><code>git clone https://username@github.com/username/repository.git\n</code></pre> <p>Alternatively, if you prefer using your password directly in a less secure fashion - where we expose the password in the command line storing history</p> <pre><code>git clone https://username:password@github.com/username/repository.git\n</code></pre> <p>A third way to clone is to use a Personal Access Token common among many Git based servers.</p> <pre><code>git clone https://*token*@github.com/username/repository.git\n</code></pre>"},{"location":"#socks-proxy-with-git","title":"SOCKS Proxy with Git","text":"<p>A SOCKS Proxy is useful to get around firewall or network blockage of a HTTPS connection to the Git server.</p> <p>Once we established a SOCKS Proxy, we can run the following to run git clone command, proxying the HTTPS connection to a SOCKS proxy.</p> <p>This example uses the <code>127.0.0.1</code> (localhost) as the connection point of the SOCKS proxy and 8055 as the port of the proxy.</p> <pre><code>ALL_PROXY=socks5h://127.0.0.1:8055 git clone https://username@github.com/username/repository.git\n</code></pre>"}]}